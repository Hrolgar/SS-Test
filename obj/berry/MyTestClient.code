[{"Name":"MyTestClient","SourceText":"// <auto-generated/>\r\n#nullable enable\r\n\r\nnamespace Microsoft.Extensions.DependencyInjection\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public static partial class MyTestClientServiceCollectionExtensions\r\n    {\r\n        public static global::StrawberryShake.IClientBuilder<global::MyTest.Client.State.MyTestClientStoreAccessor> AddMyTestClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)\r\n        {\r\n            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>\r\n            {\r\n                ConfigureClientDefault(sp, serviceCollection, strategy);\r\n                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));\r\n            });\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::MyTest.Client.State.MyTestClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyTest.Client.GetMyFirstQueryQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyTest.Client.MyTestClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyTest.Client.IMyTestClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            return new global::StrawberryShake.ClientBuilder<global::MyTest.Client.State.MyTestClientStoreAccessor>(\"MyTestClient\", services, serviceCollection);\r\n        }\r\n\r\n        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)\r\n        {\r\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>\r\n            {\r\n                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);\r\n                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient(\"MyTestClient\"));\r\n            });\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MyTest.Client.State.MyFirstSchemaEntity, global::MyTest.Client.GetMyFirstQuery_FirstQueries_MyFirstSchema>, global::MyTest.Client.State.GetMyFirstQuery_FirstQueries_MyFirstSchemaFromMyFirstSchemaEntityMapper>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyTest.Client.IGetMyFirstQueryResult>, global::MyTest.Client.State.GetMyFirstQueryResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyTest.Client.IGetMyFirstQueryResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyTest.Client.IGetMyFirstQueryQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyTest.Client.IGetMyFirstQueryResult>, global::MyTest.Client.State.GetMyFirstQueryBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyTest.Client.IGetMyFirstQueryResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyTest.Client.IGetMyFirstQueryResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyTest.Client.IGetMyFirstQueryResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyTest.Client.GetMyFirstQueryQuery>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyTest.Client.IGetMyFirstQueryQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyTest.Client.GetMyFirstQueryQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::MyTest.Client.State.MyTestClientEntityIdFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyTest.Client.MyTestClient>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyTest.Client.IMyTestClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyTest.Client.MyTestClient>(sp));\r\n            return services;\r\n        }\r\n\r\n        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable\r\n        {\r\n            private readonly System.IServiceProvider _provider;\r\n            public ClientServiceProvider(System.IServiceProvider provider)\r\n            {\r\n                _provider = provider;\r\n            }\r\n\r\n            public object? GetService(System.Type serviceType)\r\n            {\r\n                return _provider.GetService(serviceType);\r\n            }\r\n\r\n            public void Dispose()\r\n            {\r\n                if (_provider is System.IDisposable d)\r\n                {\r\n                    d.Dispose();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nnamespace MyTest.Client\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial class GetMyFirstQueryResult : global::System.IEquatable<GetMyFirstQueryResult>, IGetMyFirstQueryResult\r\n    {\r\n        public GetMyFirstQueryResult(global::System.Collections.Generic.IReadOnlyList<global::MyTest.Client.IGetMyFirstQuery_FirstQueries> firstQueries)\r\n        {\r\n            FirstQueries = firstQueries;\r\n        }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyList<global::MyTest.Client.IGetMyFirstQuery_FirstQueries> FirstQueries { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetMyFirstQueryResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(FirstQueries, other.FirstQueries));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetMyFirstQueryResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                foreach (var FirstQueries_elm in FirstQueries)\r\n                {\r\n                    hash ^= 397 * FirstQueries_elm.GetHashCode();\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial class GetMyFirstQuery_FirstQueries_MyFirstSchema : global::System.IEquatable<GetMyFirstQuery_FirstQueries_MyFirstSchema>, IGetMyFirstQuery_FirstQueries_MyFirstSchema\r\n    {\r\n        public GetMyFirstQuery_FirstQueries_MyFirstSchema(global::System.Int32 id, global::System.String testString, global::System.Int32 testInt, global::System.Boolean testBool)\r\n        {\r\n            Id = id;\r\n            TestString = testString;\r\n            TestInt = testInt;\r\n            TestBool = testBool;\r\n        }\r\n\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public global::System.String TestString { get; }\r\n\r\n        public global::System.Int32 TestInt { get; }\r\n\r\n        public global::System.Boolean TestBool { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetMyFirstQuery_FirstQueries_MyFirstSchema? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (Id == other.Id) && TestString.Equals(other.TestString) && TestInt == other.TestInt && TestBool == other.TestBool;\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetMyFirstQuery_FirstQueries_MyFirstSchema)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * Id.GetHashCode();\r\n                hash ^= 397 * TestString.GetHashCode();\r\n                hash ^= 397 * TestInt.GetHashCode();\r\n                hash ^= 397 * TestBool.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial interface IGetMyFirstQueryResult\r\n    {\r\n        public global::System.Collections.Generic.IReadOnlyList<global::MyTest.Client.IGetMyFirstQuery_FirstQueries> FirstQueries { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial interface IGetMyFirstQuery_FirstQueries\r\n    {\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public global::System.String TestString { get; }\r\n\r\n        public global::System.Int32 TestInt { get; }\r\n\r\n        public global::System.Boolean TestBool { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial interface IGetMyFirstQuery_FirstQueries_MyFirstSchema : IGetMyFirstQuery_FirstQueries\r\n    {\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetMyFirstQuery GraphQL operation\r\n    /// <code>\r\n    /// query GetMyFirstQuery {\r\n    ///   firstQueries {\r\n    ///     __typename\r\n    ///     id\r\n    ///     testString\r\n    ///     testInt\r\n    ///     testBool\r\n    ///     ... on MyFirstSchema {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial class GetMyFirstQueryQueryDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private GetMyFirstQueryQueryDocument()\r\n        {\r\n        }\r\n\r\n        public static GetMyFirstQueryQueryDocument Instance { get; } = new GetMyFirstQueryQueryDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x46, 0x69, 0x72, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x20, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x79, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"d395d24b3b60402ac66d1685ac16952a\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\r\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetMyFirstQuery GraphQL operation\r\n    /// <code>\r\n    /// query GetMyFirstQuery {\r\n    ///   firstQueries {\r\n    ///     __typename\r\n    ///     id\r\n    ///     testString\r\n    ///     testInt\r\n    ///     testBool\r\n    ///     ... on MyFirstSchema {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial class GetMyFirstQueryQuery : global::MyTest.Client.IGetMyFirstQueryQuery\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IGetMyFirstQueryResult> _operationExecutor;\r\n        public GetMyFirstQueryQuery(global::StrawberryShake.IOperationExecutor<IGetMyFirstQueryResult> operationExecutor)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetMyFirstQueryResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMyFirstQueryResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest();\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMyFirstQueryResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest();\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest()\r\n        {\r\n            return CreateRequest(null);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: GetMyFirstQueryQueryDocument.Instance.Hash.Value, name: \"GetMyFirstQuery\", document: GetMyFirstQueryQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetMyFirstQuery GraphQL operation\r\n    /// <code>\r\n    /// query GetMyFirstQuery {\r\n    ///   firstQueries {\r\n    ///     __typename\r\n    ///     id\r\n    ///     testString\r\n    ///     testInt\r\n    ///     testBool\r\n    ///     ... on MyFirstSchema {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial interface IGetMyFirstQueryQuery : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMyFirstQueryResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMyFirstQueryResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the MyTestClient GraphQL client\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial class MyTestClient : global::MyTest.Client.IMyTestClient\r\n    {\r\n        private readonly global::MyTest.Client.IGetMyFirstQueryQuery _getMyFirstQuery;\r\n        public MyTestClient(global::MyTest.Client.IGetMyFirstQueryQuery getMyFirstQuery)\r\n        {\r\n            _getMyFirstQuery = getMyFirstQuery ?? throw new global::System.ArgumentNullException(nameof(getMyFirstQuery));\r\n        }\r\n\r\n        public static global::System.String ClientName => \"MyTestClient\";\r\n        public global::MyTest.Client.IGetMyFirstQueryQuery GetMyFirstQuery => _getMyFirstQuery;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the MyTestClient GraphQL client\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial interface IMyTestClient\r\n    {\r\n        global::MyTest.Client.IGetMyFirstQueryQuery GetMyFirstQuery { get; }\r\n    }\r\n}\r\n\r\nnamespace MyTest.Client.State\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial class MyFirstSchemaEntity\r\n    {\r\n        public MyFirstSchemaEntity(global::System.Int32 id = default !, global::System.String testString = default !, global::System.Int32 testInt = default !, global::System.Boolean testBool = default !)\r\n        {\r\n            Id = id;\r\n            TestString = testString;\r\n            TestInt = testInt;\r\n            TestBool = testBool;\r\n        }\r\n\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public global::System.String TestString { get; }\r\n\r\n        public global::System.Int32 TestInt { get; }\r\n\r\n        public global::System.Boolean TestBool { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial class GetMyFirstQueryResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyTest.Client.GetMyFirstQueryResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityMapper<global::MyTest.Client.State.MyFirstSchemaEntity, GetMyFirstQuery_FirstQueries_MyFirstSchema> _getMyFirstQuery_FirstQueries_MyFirstSchemaFromMyFirstSchemaEntityMapper;\r\n        public GetMyFirstQueryResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MyTest.Client.State.MyFirstSchemaEntity, GetMyFirstQuery_FirstQueries_MyFirstSchema> getMyFirstQuery_FirstQueries_MyFirstSchemaFromMyFirstSchemaEntityMapper)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _getMyFirstQuery_FirstQueries_MyFirstSchemaFromMyFirstSchemaEntityMapper = getMyFirstQuery_FirstQueries_MyFirstSchemaFromMyFirstSchemaEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMyFirstQuery_FirstQueries_MyFirstSchemaFromMyFirstSchemaEntityMapper));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyTest.Client.IGetMyFirstQueryResult);\r\n        public GetMyFirstQueryResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is GetMyFirstQueryResultInfo info)\r\n            {\r\n                return new GetMyFirstQueryResult(MapNonNullableIGetMyFirstQuery_FirstQueriesNonNullableArray(info.FirstQueries, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"GetMyFirstQueryResultInfo expected.\");\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::MyTest.Client.IGetMyFirstQuery_FirstQueries> MapNonNullableIGetMyFirstQuery_FirstQueriesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (list is null)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            var myFirstSchemas = new global::System.Collections.Generic.List<global::MyTest.Client.IGetMyFirstQuery_FirstQueries>();\r\n            foreach (global::StrawberryShake.EntityId child in list)\r\n            {\r\n                myFirstSchemas.Add(MapNonNullableIGetMyFirstQuery_FirstQueries(child, snapshot));\r\n            }\r\n\r\n            return myFirstSchemas;\r\n        }\r\n\r\n        private global::MyTest.Client.IGetMyFirstQuery_FirstQueries MapNonNullableIGetMyFirstQuery_FirstQueries(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (entityId.Name.Equals(\"MyFirstSchema\", global::System.StringComparison.Ordinal))\r\n            {\r\n                return _getMyFirstQuery_FirstQueries_MyFirstSchemaFromMyFirstSchemaEntityMapper.Map(snapshot.GetEntity<global::MyTest.Client.State.MyFirstSchemaEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial class GetMyFirstQueryResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public GetMyFirstQueryResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> firstQueries, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            FirstQueries = firstQueries;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> FirstQueries { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new GetMyFirstQueryResultInfo(FirstQueries, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial class GetMyFirstQuery_FirstQueries_MyFirstSchemaFromMyFirstSchemaEntityMapper : global::StrawberryShake.IEntityMapper<global::MyTest.Client.State.MyFirstSchemaEntity, GetMyFirstQuery_FirstQueries_MyFirstSchema>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public GetMyFirstQuery_FirstQueries_MyFirstSchemaFromMyFirstSchemaEntityMapper(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        public GetMyFirstQuery_FirstQueries_MyFirstSchema Map(global::MyTest.Client.State.MyFirstSchemaEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            return new GetMyFirstQuery_FirstQueries_MyFirstSchema(entity.Id, entity.TestString, entity.TestInt, entity.TestBool);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial class GetMyFirstQueryBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyTest.Client.IGetMyFirstQueryResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MyTest.Client.IGetMyFirstQueryResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;\r\n        public GetMyFirstQueryBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyTest.Client.IGetMyFirstQueryResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>(\"Int\") ?? throw new global::System.ArgumentException(\"No serializer for type `Int` found.\");\r\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\r\n            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>(\"Boolean\") ?? throw new global::System.ArgumentException(\"No serializer for type `Boolean` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IGetMyFirstQueryResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IGetMyFirstQueryResult Result, GetMyFirstQueryResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (response.Body != null && response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                {\r\n                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                }\r\n                else\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IGetMyFirstQueryResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IGetMyFirstQueryResult, GetMyFirstQueryResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> firstQueriesId = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                firstQueriesId = UpdateNonNullableIGetMyFirstQuery_FirstQueriesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"firstQueries\"), entityIds);\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new GetMyFirstQueryResultInfo(firstQueriesId, entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetMyFirstQuery_FirstQueriesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            var myFirstSchemas = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();\r\n            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())\r\n            {\r\n                myFirstSchemas.Add(UpdateNonNullableIGetMyFirstQuery_FirstQueriesEntity(session, child, entityIds));\r\n            }\r\n\r\n            return myFirstSchemas;\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId UpdateNonNullableIGetMyFirstQuery_FirstQueriesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\r\n            entityIds.Add(entityId);\r\n            if (entityId.Name.Equals(\"MyFirstSchema\", global::System.StringComparison.Ordinal))\r\n            {\r\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MyTest.Client.State.MyFirstSchemaEntity? entity))\r\n                {\r\n                    session.SetEntity(entityId, new global::MyTest.Client.State.MyFirstSchemaEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"testString\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"testInt\")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"testBool\"))));\r\n                }\r\n                else\r\n                {\r\n                    session.SetEntity(entityId, new global::MyTest.Client.State.MyFirstSchemaEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"testString\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"testInt\")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"testBool\"))));\r\n                }\r\n\r\n                return entityId;\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _intParser.Parse(obj.Value.GetInt32()!);\r\n        }\r\n\r\n        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _stringParser.Parse(obj.Value.GetString()!);\r\n        }\r\n\r\n        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _booleanParser.Parse(obj.Value.GetBoolean()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial class MyTestClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer\r\n    {\r\n        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()\r\n        {Indented = false};\r\n        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            global::System.String __typename = obj.GetProperty(\"__typename\").GetString()!;\r\n            return __typename switch\r\n            {\r\n                \"MyFirstSchema\" => ParseMyFirstSchemaEntityId(obj, __typename),\r\n                _ => throw new global::System.NotSupportedException()};\r\n        }\r\n\r\n        public global::System.String Format(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            return entityId.Name switch\r\n            {\r\n                \"MyFirstSchema\" => FormatMyFirstSchemaEntityId(entityId),\r\n                _ => throw new global::System.NotSupportedException()};\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId ParseMyFirstSchemaEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)\r\n        {\r\n            return new global::StrawberryShake.EntityId(type, obj.GetProperty(\"id\").GetInt32()!);\r\n        }\r\n\r\n        private global::System.String FormatMyFirstSchemaEntityId(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            using var writer = new global::StrawberryShake.Internal.ArrayWriter();\r\n            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);\r\n            jsonWriter.WriteStartObject();\r\n            jsonWriter.WriteString(\"__typename\", entityId.Name);\r\n            jsonWriter.WriteNumber(\"id\", (global::System.Int32)entityId.Value);\r\n            jsonWriter.WriteEndObject();\r\n            jsonWriter.Flush();\r\n            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.7.0.0\")]\r\n    public partial class MyTestClientStoreAccessor : global::StrawberryShake.StoreAccessor\r\n    {\r\n        public MyTestClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)\r\n        {\r\n        }\r\n    }\r\n}\r\n","Kind":0,"Hash":null,"Path":null}]